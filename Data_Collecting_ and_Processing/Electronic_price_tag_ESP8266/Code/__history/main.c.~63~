#include <16F628.h>

#use delay(crystal=12MHz)
#define LED PIN_A0
#define BUZZ PIN_A1
#define DELAY 500
//#use pwm(CCP2,FREQUENCY=1200,DUTY=90)

//Define mode
#define  COMMAND_MODE 0b10000000 /*!< This is used FOR sending standard commands. */
#define  READ_MODE  0b11000000 /*!< This instructs the HT1621 to prepare FOR reading the internal RAM. */
#define  WRITE_MODE  0b10100000 /*!< This instructs the HT1621 to prepare FOR writing the internal RAM. */
#define  READ_MODIFY_WRITE_MODE  0b10100000 /*!< This instructs the HT1621 to prepare FOR reading/modifying batch of internal RAM adresses. */
#define  SPECIAL_MODE  0b10010000 /*!< This instructs the HT1621 to prepare FOR executing a special command. */

//Define command
#define COMMAND_SYS_DIS    0b00000000 /*!< System disable. It stops the bias generator and the system oscillator. */
#define COMMAND_SYS_EN     0b00000010 /*!< System enable. It starts the bias generator and the system oscillator. */
#define COMMAND_LCD_OFF    0b00000100 /*!< Turn off the bias generator. */
#define COMMAND_LCD_ON     0b00000110 /*!< Turn on the bias generator. */
#define COMMAND_TIMER_DIS  0b00001000 /*!< Disable time base output. */
#define COMMAND_WDT_DIS    0b00001010 /*!< Watch-dog timer disable. */
#define COMMAND_TIMER_EN   0b00001100 /*!< Enable time base output. */
#define COMMAND_WDT_EN     0b00001110 /*!< Watch-dog timer enable. The timer is reset. */
#define COMMAND_CLR_TIMER  0b00011000 /*!< Clear the contents of the time base generator. */
#define COMMAND_CLR_WDT    0b00011100 /*!< Clear the contents of the watch-dog stage. */
#define COMMAND_TONE_OFF   0b00010000 /*!< Stop emitting the tone signal at the tone pin. \sa TONE2K, TONE4K */
#define COMMAND_TONE_ON    0b00010010 /*!< Start emitting tone signal at the tone pin. Tone frequency is selected using commands TONE2K or TONE4K. \sa TONE2K, TONE4K */
#define COMMAND_TONE2K     0b11000000 /*!< Output tone is at 2kHz. */
#define COMMAND_TONE4K     0b10000000 /*!< Output tone is at 4kHz. */
#define COMMAND_RC256K     0b00110000 /*!< System oscillator is the internal RC oscillator at 256kHz. */
#define COMMAND_XTAL32K    0b00101000 /*!< System oscillator is the crystal oscillator at 32768Hz. */
#define COMMAND_EXT256K    0b00111000 /*!< System oscillator is an external oscillator at 256kHz. */

//Set bias to 1/2 or 1/3 cycle

//Set to 2,3 or 4 connected COM lines
#define COMMAND_BIAS_HALF_2_COM   0b01000000 /*!< Use 1/2 bias and 2 commons. */
#define COMMAND_BIAS_HALF_3_COM   0b01001000 /*!< Use 1/2 bias and 3 commons. */
#define COMMAND_BIAS_HALF_4_COM   0b01010000 /*!< Use 1/2 bias and 4 commons. */
#define COMMAND_BIAS_THIRD_2_COM  0b01000010 /*!< Use 1/3 bias and 2 commons. */
#define COMMAND_BIAS_THIRD_3_COM  0b01001010 /*!< Use 1/3 bias and 3 commons. */
#define COMMAND_BIAS_THIRD_4_COM  0b01010010 /*!< Use 1/3 bias and 4 commons. */
#define COMMAND_IRQ_EN     0b00010000 /*!< Enables IRQ output. This needs to be excuted in SPECIAL_MODE. */
#define COMMAND_IRQ_DIS    0b00010000 /*!< Disables IRQ output. This needs to be excuted in SPECIAL_MODE. */

// WDT configuration commands
#define COMMAND_F1  0b01000000 /*!< Time base/WDT clock. Output = 1Hz. Time-out = 4s. This needs to be excuted in SPECIAL_MODE. */
#define COMMAND_F2  0b01000010 /*!< Time base/WDT clock. Output = 2Hz. Time-out = 2s. This needs to be excuted in SPECIAL_MODE. */
#define COMMAND_F4  0b01000100 /*!< Time base/WDT clock. Output = 4Hz. Time-out = 1s. This needs to be excuted in SPECIAL_MODE. */
#define COMMAND_F8  0b01000110 /*!< Time base/WDT clock. Output = 8Hz. Time-out = .5s. This needs to be excuted in SPECIAL_MODE. */
#define COMMAND_F16  0b01001000 /*!< Time base/WDT clock. Output = 16Hz. Time-out = .25s. This needs to be excuted in SPECIAL_MODE. */
#define COMMAND_F32  0b01001010 /*!< Time base/WDT clock. Output = 32Hz. Time-out = .125s. This needs to be excuted in SPECIAL_MODE. */
#define COMMAND_F64  0b01001100 /*!< Time base/WDT clock. Output = 64Hz. Time-out = .0625s. This needs to be excuted in SPECIAL_MODE. */
#define COMMAND_F128  0b01001110 /*!< Time base/WDT clock. Output = 128Hz. Time-out = .03125s. This needs to be excuted in SPECIAL_MODE. */

//Don't use
#define COMMAND_TEST_ON    0b11000000 /*!< Don't use! Only FOR manifacturers. This needs SPECIAL_MODE. */
#define COMMAND_TEST_OFF   0b11000110  /*!< Don't use! Only FOR manifacturers. This needs SPECIAL_MODE. */
#define uchar   unsigned char
#define uint   unsigned int16

// //Define port    HT1621 data port
#define CS   PIN_B5  //Pin 2 as chip selection output
#define WR   PIN_B4  //Pin 3 as read clock  output
#define DATA PIN_B3 //Pin 4 as Serial data output Khong dung duoc C4
//
// //Define port    HT1621 data port
#define CS2   PIN_B2  //Pin 2 as chip selection output
#define WR2   PIN_B1  //Pin 3 as read clock  output
#define DATA2 PIN_B0 //Pin 4 as Serial data output Khong dung duoc C4

#define CSH    output_high(CS2)//digitalWrite(CS, HIGH)
#define CSL    output_low(CS2)//digitalWrite(CS, LOW)
#define WRH    output_high(WR2)//digitalWrite(WR, HIGH)
#define WRL    output_low(WR2)//digitalWrite(WR, LOW)
#define DATAH  output_high(DATA2)//digitalWrite(DATA, HIGH)
#define DATAL  output_low(DATA2)//digitalWrite(DATA, LOW)

char dispnum[3] = {0x00, 0x00, 0x00};
const char num_small[] = {0b01011111, 0b00000110, 0b00111101, 0b00101111, 0b01100110, 0b01101011, 0b01111011, 0b00001110, 0b01111111, 0b01101111};//LCD loai nho
const       char num[] = {0b01011111, 0b00000110, 0b01101011, 0b00101111, 0b00110110, 0b00111101, 0b01111101, 0b00000111, 0b01111111, 0b00111111};
unsigned int16 time_left=0;

/*Name: SendBit_1621(send data)
---------------------------------------------------------------------------*/
void SendBit_1621(uchar sdata, uchar cnt) //High bit first
{
   uchar i;
   for (i = 0; i < cnt; i++)
   {
      WRL;
      delay_us(20);
      if (sdata & 0x80) DATAH;
      else DATAL;
      delay_us(20);
      WRH;
      delay_us(20);
      sdata <<= 1;
   }
   delay_us(20);
}

/**-------------------------------------------------------------------------

         Name: SendCmd(send cmd)
         //Write MODE"100" AND 9 bits command
---------------------------------------------------------------------------*/

void SendCmd_1621(uchar command)
{
   CSL;
   SendBit_1621(0x80, 4);
   SendBit_1621(command, 8);
   CSH;
}
/**-------------------------------------------------------------------------

         Name: Write_1621send data and cmd)
---------------------------------------------------------------------------*/

void Write_1621(uchar addr, uchar sdata)
{
   addr <<= 3;
   CSL;
   SendBit_1621(0xa0, 3);    //Write MODE"101"
   SendBit_1621(addr, 6);    //Write addr high 6 bits
   SendBit_1621(sdata, 8);   //Write data  8 bits
   CSH;
}


/**-------------------------------------------------------------------------

            Name: all_off(Clear Display)
---------------------------------------------------------------------------*/

void HT1621_all_off(uchar num_small)
{ uchar i;
   uchar addr = 0;
   for (i = 0; i < num_small; i++)
   {
      Write_1621(addr, 0x00);
      addr += 1;
   }
}
/****************************************************************************

            Name: all_on(All lit)
****************************************************************************/

void HT1621_all_on(uchar num_small)
{ 
   uchar i, j;
   uchar addr = 0;
   for (i = 0; i < num_small; i++)
   { Write_1621(addr, 0xff);
      addr += 1;
   }
}      /****************************************************************************

                  Name: all_on_num(All lit,Display the same number)
****************************************************************************/

void HT1621_all_on_num(uchar num_small, uchar xx)
{ 
   uchar i, j;
   uchar addr = 0;
   for (i = 0; i < num_small; i++)
   { Write_1621(addr, xx);
      addr += 1;
   }
}

/****************************************************************************

            Name: Init_1621(initialize 1621)
*****************************************************************************/

void Init_1621(void)
{
   SendCmd_1621(COMMAND_SYS_EN);
   SendCmd_1621(COMMAND_RC256K);
   SendCmd_1621(COMMAND_BIAS_HALF_4_COM);
   SendCmd_1621(COMMAND_LCD_ON);
}
/****************************************************************************

            Name: LCDoff(off 1621)
*****************************************************************************/

void LCDoff(void)
{
   SendCmd_1621(COMMAND_LCD_OFF);
}
/****************************************************************************

            Name: LCDon(on 1621)
*****************************************************************************/

void LCDon(void)
{
   SendCmd_1621(COMMAND_LCD_ON);
}


void displayallnum(unsigned int n)       //Display all digital characters
{ uchar i, j;
   uchar addr = 0;

   for (i = 0; i < n; i++)
   { for (j = 0; j < 27; j++)
      {
         Write_1621(addr, num_small[j]); delay_ms(100) ;
      }
      addr += 1;
   }

}


//By-bit display 8 characters and decimal point
void displayall8(void)
{ uchar i;
   HT1621_all_off(16);
   for (i = 0; i < 16; i++)
   {
      Write_1621(i, 0b11110111);
      delay_ms(50) ;
   }
}

//

/****************************************************************************

Name: displaydata(unsigned long int t) Display  data
t : Data to be displayed

*****************************************************************************/

void displaydata(unsigned int16 t)
{ 
   dispnum[0] = num_small[(t / 100)%10];
   dispnum[1] = num_small[(t / 10)%10];
   dispnum[2] = num_small[(t%10)];
   if(t>=100) Write_1621(0, dispnum[0]);
   else Write_1621(0, 0);
   if(t>=10)  Write_1621(1, dispnum[1]);
   else Write_1621(1, 0);
   if(t>=0)Write_1621(2, dispnum[2]);
   
   //!    uchar i;
   //!  for (i = 0; i < 3 ; i++)
   //!  {
   //!    Write_1621(i, dispnum[i]);
   //!  }
}


void stop_display()
{
 SendCmd_1621(COMMAND_LCD_OFF);
 SendCmd_1621(COMMAND_SYS_DIS);
}
void main()
{
      
      
      Init_1621() ;
      HT1621_all_on(16) ;
      delay_ms(300) ;
      HT1621_all_off(16);
      delay_ms(300) ;
      HT1621_all_on(16) ;
      delay_ms(300) ;
      HT1621_all_off(16);
      delay_ms(300) ;
      enable_interrupts(INT_TIMER1);
      enable_interrupts(GLOBAL);
      time_left=10;
   While(true)
   {
      if(time_left<=1) time_left=999;
     while(time_left>0)
     {
         displaydata(time_left);
         time_left--;
         if(time_left>1)
         {
         delay_ms(1000);
         }
     }
   }
}
